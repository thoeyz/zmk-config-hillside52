/*
 * Copyright (c) 2021-2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


/ {
        
 	combos {
        	compatible = "zmk,combos";
        	combo_PGUP {
            		timeout-ms = <50>;
            		key-positions = <2 4>;
            		layers = <0>;
            		bindings = <&kp PG_UP>;
        	};

        	combo_PGDN {
            		timeout-ms = <50>;
            		key-positions = <26 28>;
            		layers = <0>;
            		bindings = <&kp PG_DN>;
        	};

        	combo_ALT1 {
            		timeout-ms = <50>;
            		key-positions = <2 3 4>;
            		layers = <0>;
            		bindings = <&kp LA(N1)>;
       		};

       	 	combo_ALT2 {
            		timeout-ms = <50>;
            		key-positions = <14 15 16>;
            		layers = <0>;
            		bindings = <&kp LA(N2)>;
        	};
    	};


	keymap {
                compatible = "zmk,keymap";

                default_layer {

                        bindings = <
&kp  TAB         &kp  Q           &kp  W        &kp  E        &kp  R       &kp  T                                                                               &kp  Y        &kp  U        &kp  I             &kp  O             &kp  P                &kp  MINUS
&mo  2           &lt  4 A         &kp  S        &kp  D        &kp  F       &kp  G                                                                               &kp  H        &kp  J        &kp  K             &kp  L             &kp  SEMI             &kp  RET
&kp  DEL         &mt  LSHIFT Z    &kp  X        &kp  C        &kp  V       &kp  B          &kp LA(LSHIFT)                                         &kp  RET      &kp  N        &kp  M        &mt  RCTL COMMA    &mt  RALT DOT      &mt  RSHIFT  FSLH     &kp  RSHFT
&kp  LC(PG_UP)   &kp  LC(PG_DN)   &tog 1                      &lt  5 ESC   &mt  LALT TAB   &mt LCTRL  BSPC    &mo 2                      &mo 1    &kp  SPACE    &kp  RALT     &kp  RGUI                        &kp  HOME          &kp  END              &kp  DEL
                        >;
		};
		
	       fpsnumber_layer {

                        bindings = <
&kp  O        &kp  ESC      &kp  LSHIFT   &kp  W       &kp  C       &kp  R                                                                      &kp  MINUS    &kp  N7       &kp  N8       &kp  N9       &kp  MINUS           &kp  DEL
&kp  I        &kp  E        &kp  A        &kp  S       &kp  D       &kp  G                                                                      &kp  PLUS     &kp  N4       &kp  N5       &kp  N6       &kp  KP_MULTIPLY     &kp  DOT
&kp  LCTRL    &kp  X        &kp  N3       &kp LEFT     &kp  F       &kp  N5    &kp  F2                                            &kp  RET      &kp  N0       &kp  N1       &kp  N2       &kp  N3       &kp  KP_DIVIDE       &kp  RSHFT
&trans        &kp  ESC      &tog 1                     &kp RIGHT    &kp  Z     &kp  SPACE    &kp LALT                  &kp EQUAL  &kp  LBKT     &kp  RBKT     &kp  RET                    &kp  HOME     &kp  END             &trans
                        >;
		};

               navsim_layer {

                        bindings = <
&kp  ESC      &kp  N1       &kp  N2       &kp  N4       &kp  N5        &kp  N6                                                                         &kp  N7       &kp  N8       &kp  N9       &kp  N0       &kp  MINUS    &kp  MINUS
&kp  F5       &kp  F2       &kp  LEFT     &kp  UP       &kp  RIGHT     &kp  HOME                                                                       &kp  LPAR     &kp  RPAR     &kp  LBRC     &kp  RBRC     &kp  APOS     &kp  SQT
&kp  LCTRL    &kp  F4       &kp  LA(LEFT) &kp  DOWN     &kp  LA(RIGHT) &kp  END     &kp  SQT                                             &kp  SLASH    &kp  LT       &kp  GT       &kp  COMMA    &kp  DOT      &kp  FSLH     &kp  RSHFT
&kp  C_MUTE   &kp  ESC      &kp  LCTRL                  &kp  LGUI      &kp  LALT    &kp  LC(PG_UP)  &kp LC(PG_DN)             &kp EQUAL  &kp  LBKT     &kp  RBKT     &kp  RET                    &kp  HOME     &kp  END      &tog 1
                        >;

                };
      
 	       Guildwars_layer {

                        bindings = <
&kp  ESC      &kp  N1       &kp  N2       &kp  N4       &kp  N5        &kp  N6                                                                          &kp  N7       &kp  N8       &kp  N9       &kp  N0       &kp  MINUS    &kp  MINUS
&kp  F5       &kp  F2       &kp  LEFT     &kp  UP       &kp  RIGHT     &kp  HOME                                                                        &kp  LPAR     &kp  RPAR     &kp  LBRC     &kp  RBRC     &kp  APOS     &kp  SQT
&kp  LCTRL    &kp  F4       &kp  LA(LEFT) &kp  DOWN     &kp  LA(RIGHT) &kp  END      &kp  SQT                                             &kp  SLASH    &kp  LT       &kp  GT       &kp  COMMA    &kp  DOT      &kp  FSLH     &kp  RSHFT
&kp  C_MUTE   &kp  ESC      &kp  LCTRL                  &kp  LGUI      &kp  LALT     &sk  SPACE    &kp A                       &kp EQUAL  &kp  LBKT     &kp  RBKT     &kp  RET                    &kp  HOME     &kp  END      &kp  DEL
                        >;

                };

		southpawnum_layer {

                        bindings = <
&kp  ESC      &kp  N1     &kp  N7       &kp  N8      &kp  N9         &kp  RET                                                                 &kp  N7       &kp  N8       &kp  N9       &kp  N0       &kp  MINUS    &kp  MINUS
&kp  F5       &kp  F2     &kp  N4       &kp  N5      &kp  N6         &kp  DOT                                                                 &kp  LPAR     &kp  RPAR     &kp  LBRC     &kp  RBRC     &kp  APOS     &kp  SQT
&kp  LCTRL    &kp  F4     &kp  N1       &kp  N2      &kp  N3         &kp  N0     &kp  DEL                                       &kp  SLASH    &kp  LT       &kp  GT       &kp  COMMA    &kp  DOT      &kp  FSLH     &kp  RSHFT
&kp  C_MUTE   &kp  ESC    &kp  LCTRL                 &kp  KP_DIVIDE  &kp  MINUS  &kp  PLUS  &kp KP_MULTIPLY          &kp EQUAL  &kp  LBKT     &kp  RBKT     &kp  RET                    &kp  HOME     &kp  END      &kp  DEL
                        >;

                };

		onehanded_layer {

                        bindings
&kp  ESC         &kp  P           &kp  O        &kp  I        &kp  U       &kp  Y                                                               &kp  Y        &kp  U        &kp  I             &kp  O             &kp  P                &kp  MINUS
&kp  SPACE       &kp  SEMI        &kp  L        &kp  K        &kp  J       &kp  H                                                               &kp  H        &kp  J        &kp  K             &kp  L             &kp  SEMI             &kp  RET
&kp  RET         &kp  FSLH        &kp  DOT      &kp  COMMA    &kp  M       &kp  N       &kp LA(LSHIFT)                            &kp  RET      &kp  N        &kp  M        &mt  RCTL COMMA    &mt  RALT DOT      &mt  RSHIFT  FSLH     &kp  RSHFT
&trans           &trans           &trans                      &trans       &trans       &trans    &trans                 &mo 1    &kp  SPACE    &kp  RALT     &kp  RGUI                        &kp  HOME          &kp  END              &kp  DEL
                        >;
		};

 	 };
};
